name: Build Nexa Executables MacOS CPU Bundle

on:
  push:
    branches: [ perry/macos-cpu-bundle ]
  pull_request:
    branches: [ perry/macos-cpu-bundle ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        brew install cmake

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller wheel setuptools scikit-build-core

    - name: Install nexaai
      run: pip install -e . --verbose --prefer-binary --index-url https://nexaai.github.io/nexa-sdk/whl/cpu --extra-index-url https://pypi.org/simple --no-cache-dir

    - name: Extract version
      run: |
        VERSION=$(python -c "import re; print(re.search(r'__version__\s*=\s*[\'\"](.*?)[\'\"]', open('nexa/__init__.py').read()).group(1))")
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build with PyInstaller
      run: pyinstaller nexa-macos-cpu.spec

    - name: Create keychain and import certificate
      env:
        CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
        CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
      run: |
        echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import certificate.p12 -k build.keychain -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign
        security find-identity -v -p codesigning build.keychain
        security find-certificate -a -c "Developer ID Application" build.keychain

    - name: Verify certificate import
      run: |
        security find-identity -v -p codesigning
        security find-certificate -a -c "Developer ID Application"

    - name: Unlock keychain
      run: |
        security unlock-keychain -p "" build.keychain
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

    - name: Sign the app
      env:
        APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
      run: |
        echo "Using Developer ID: $APPLE_DEVELOPER_ID"
        /usr/bin/codesign --force -s "$APPLE_DEVELOPER_ID" --options runtime dist/nexa.app -v --verbose

    - name: Create DMG
      run: |
        brew install create-dmg
        create-dmg \
          --volname "Nexa Installer" \
          --volicon "./nexa-icon.icns" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "nexa.app" 200 190 \
          --hide-extension "nexa.app" \
          --app-drop-link 600 185 \
          "Nexa-${{ env.VERSION }}.dmg" \
          "dist/nexa.app"

    - name: Upload artifact (pre-notarization)
      uses: actions/upload-artifact@v4
      with:
        name: nexa-${{ env.VERSION }}-cpu-macos-amd64-pre-notarization
        path: Nexa-${{ env.VERSION }}.dmg

    - name: Submit for notarization
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        NOTARIZATION_OUTPUT=$(xcrun notarytool submit Nexa-${{ env.VERSION }}.dmg --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID")
        echo "$NOTARIZATION_OUTPUT"
        
        # Extracting SUBMISSION_ID and ensuring it's on a single line
        SUBMISSION_ID=$(echo "$NOTARIZATION_OUTPUT" | grep 'id:' | head -n 1 | awk '{print $2}' | tr -d '\n')
        echo "SUBMISSION_ID=$SUBMISSION_ID" >> $GITHUB_ENV

    - name: Wait for notarization and check result
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        while true; do
          NOTARIZATION_INFO=$(xcrun notarytool info ${{ env.SUBMISSION_ID }} --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID")
          STATUS=$(echo "$NOTARIZATION_INFO" | grep "status" | cut -d: -f2 | xargs)
          echo "Notarization status: $STATUS"
          if [ "$STATUS" = "Accepted" ]; then
            echo "Notarization successful"
            break
          elif [ "$STATUS" = "Invalid" ] || [ "$STATUS" = "Rejected" ]; then
            echo "Notarization failed. Fetching detailed log..."
            xcrun notarytool log ${{ env.SUBMISSION_ID }} --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID"
            exit 1
          fi
          echo "Waiting for 60 seconds before checking again..."
          sleep 60
        done

    - name: Staple the notarization ticket
      if: success()
      run: |
        xcrun stapler staple Nexa-${{ env.VERSION }}.dmg

    - name: Upload artifact (post-notarization)
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: nexa-${{ env.VERSION }}-cpu-macos-amd64-notarized
        path: Nexa-${{ env.VERSION }}.dmg