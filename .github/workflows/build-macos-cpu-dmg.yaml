name: Build Nexa Executables MacOS CPU Bundle

on:
  push:
    branches: [ perry/macos-cpu-bundle ]
  pull_request:
    branches: [ perry/macos-cpu-bundle ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        brew install cmake

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller wheel setuptools scikit-build-core

    - name: Install nexaai
      run: pip install -e . --verbose --prefer-binary --index-url https://nexaai.github.io/nexa-sdk/whl/cpu --extra-index-url https://pypi.org/simple --no-cache-dir

    - name: Extract version
      run: |
        VERSION=$(python -c "import re; print(re.search(r'__version__\s*=\s*[\'\"](.*?)[\'\"]', open('nexa/__init__.py').read()).group(1))")
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build with PyInstaller
      run: pyinstaller nexa-macos-cpu.spec

    - name: Create launcher script
      run: |
        if [ -d "nexa" ]; then
          SCRIPT_NAME="nexa_launcher"
        else
          SCRIPT_NAME="nexa"
        fi

        cat << EOF > "$SCRIPT_NAME"
        #!/bin/bash

        NEXA_APP="/Applications/Nexa.app"
        NEXA_EXECUTABLE="\$NEXA_APP/Contents/MacOS/nexa"

        if [ "\$1" = "--gui" ]; then
          osascript -e "tell application \"Terminal\" to do script \"\$NEXA_EXECUTABLE\""
        else
          "\$NEXA_EXECUTABLE" "\$@"
        fi
        EOF

        chmod +x "$SCRIPT_NAME"
        echo "LAUNCHER_SCRIPT_NAME=$SCRIPT_NAME" >> $GITHUB_ENV

    - name: Add launcher script to app bundle
      run: |
        mkdir -p "dist/nexa.app/Contents/Resources"
        cp "${{ env.LAUNCHER_SCRIPT_NAME }}" "dist/nexa.app/Contents/Resources/nexa"
        mkdir -p "dist/nexa.app/Contents/Frameworks/nexa"
        cp "${{ env.LAUNCHER_SCRIPT_NAME }}" "dist/nexa.app/Contents/Frameworks/nexa/nexa_launcher"
        chmod +x "dist/nexa.app/Contents/Frameworks/nexa/nexa_launcher"

    - name: Modify Info.plist
      run: |
        /usr/libexec/PlistBuddy -c "Set CFBundleExecutable nexa" "dist/nexa.app/Contents/Info.plist"
        /usr/libexec/PlistBuddy -c "Add LSUIElement string 1" "dist/nexa.app/Contents/Info.plist"

    - name: Set app icon
      run: |
        cp nexa-icon.icns dist/nexa.app/Contents/Resources/
        /usr/libexec/PlistBuddy -c "Set :CFBundleIconFile nexa-icon" dist/nexa.app/Contents/Info.plist

    - name: Create keychain and import certificate
      env:
        CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
        CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
      run: |
        echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import certificate.p12 -k build.keychain -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

    - name: Sign the app
      env:
        APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
      run: |
        # Sign nexa_launcher individually
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa.app/Contents/Frameworks/nexa/nexa_launcher"
        
        # Sign Python binaries
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa.app/Contents/Resources/Python"
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa.app/Contents/Resources/Python.framework/Python"
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa.app/Contents/Frameworks/Python"
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa.app/Contents/Frameworks/Python.framework/Python"

        # Sign all other components
        find "dist/nexa.app/Contents" -type f \( -name "*.so" -o -name "*.dylib" \) -exec codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" {} \;
        
        # Sign the main executable
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa.app/Contents/MacOS/nexa"
        
        # Sign the entire app bundle with --deep option
        codesign --force --options runtime --timestamp --deep -s "$APPLE_DEVELOPER_ID" "dist/nexa.app"
        
        # Verify the signature
        codesign -vvv --deep --strict "dist/nexa.app"

    - name: Create PKG Installer
      run: |
        mkdir -p pkg_root/Applications pkg_scripts

        cp -R dist/nexa.app pkg_root/Applications/

        cat << EOF > pkg_scripts/preinstall
        #!/bin/bash
        rm -f /usr/local/bin/nexa
        exit 0
        EOF

        cat << EOF > pkg_scripts/postinstall
        #!/bin/bash
        ln -sf /Applications/Nexa.app/Contents/Resources/nexa /usr/local/bin/nexa

        LAUNCHER="/Applications/Nexa.app/Contents/MacOS/nexa"
        mv "\$LAUNCHER" "\$LAUNCHER.real"
        cat << EOL > "\$LAUNCHER"
        #!/bin/bash
        "\$LAUNCHER.real" --gui
        EOL
        chmod +x "\$LAUNCHER"

        exit 0
        EOF

        chmod +x pkg_scripts/preinstall pkg_scripts/postinstall

        pkgbuild --root pkg_root \
                --scripts pkg_scripts \
                --identifier com.yourcompany.nexa \
                --version ${{ env.VERSION }} \
                --install-location / \
                "Nexa-${{ env.VERSION }}.pkg"

        rm -rf pkg_root pkg_scripts

    # - name: Sign PKG
    #   env:
    #     APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
    #   run: |
    #     productsign --sign "$APPLE_DEVELOPER_ID" \
    #                 "Nexa-${{ env.VERSION }}.pkg" \
    #                 "Nexa-${{ env.VERSION }}-signed.pkg"

    #     pkgutil --check-signature "Nexa-${{ env.VERSION }}-signed.pkg"

    #     mv "Nexa-${{ env.VERSION }}-signed.pkg" "Nexa-${{ env.VERSION }}.pkg"

    - name: Notarize PKG
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "Submitting package for notarization..."
        SUBMIT_OUTPUT=$(xcrun notarytool submit "Nexa-${{ env.VERSION }}.pkg" --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait)
        echo "Submission output:"
        echo "$SUBMIT_OUTPUT"
        
        # Extract the submission ID
        SUBMISSION_ID=$(echo "$SUBMIT_OUTPUT" | grep "id:" | awk '{print $2}')
        
        if [ -z "$SUBMISSION_ID" ]; then
          echo "Failed to extract submission ID. Notarization likely failed."
          exit 1
        fi
        
        echo "Fetching notarization info for submission ID: $SUBMISSION_ID"
        NOTARIZATION_INFO=$(xcrun notarytool info "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID")
        echo "Notarization info:"
        echo "$NOTARIZATION_INFO"
        
        if echo "$NOTARIZATION_INFO" | grep -q "status: Accepted"; then
          echo "Notarization successful"
          echo "Stapling notarization ticket to the package..."
          xcrun stapler staple "Nexa-${{ env.VERSION }}.pkg"
          echo "Notarization ticket stapled to the package"
        else
          echo "Notarization failed. Fetching submission log..."
          xcrun notarytool log "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID"
          echo "Notarization failed. See log above for details."
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: nexa-${{ env.VERSION }}-cpu-macos-amd64
        path: Nexa-${{ env.VERSION }}.pkg