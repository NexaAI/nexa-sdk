name: Build Nexa Executables MacOS CPU Bundle

on:
  push:
    branches: [ perry/macos-cpu-bundle ]
  pull_request:
    branches: [ perry/macos-cpu-bundle ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        brew install cmake

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller wheel setuptools scikit-build-core

    - name: Install nexaai
      run: pip install -e . --verbose --prefer-binary --index-url https://nexaai.github.io/nexa-sdk/whl/cpu --extra-index-url https://pypi.org/simple --no-cache-dir

    - name: Extract version
      run: |
        VERSION=$(python -c "import re; print(re.search(r'__version__\s*=\s*[\'\"](.*?)[\'\"]', open('nexa/__init__.py').read()).group(1))")
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build with PyInstaller
      run: pyinstaller nexa-macos-cpu.spec

    - name: Create launcher script
      run: |
        # First, ensure we're not overwriting an existing directory
        if [ -d "nexa" ]; then
          echo "Warning: 'nexa' directory already exists. Creating launcher script as 'nexa_launcher' instead."
          SCRIPT_NAME="nexa_launcher"
        else
          SCRIPT_NAME="nexa"
        fi

        # Create the launcher script
        cat << EOF > "$SCRIPT_NAME"
        #!/bin/bash

        NEXA_APP="/Applications/Nexa.app"
        NEXA_EXECUTABLE="\$NEXA_APP/Contents/MacOS/nexa"

        if [ "\$1" = "--gui" ]; then
          osascript -e "tell application \"Terminal\" to do script \"\$NEXA_EXECUTABLE\""
        else
          "\$NEXA_EXECUTABLE" "\$@"
        fi
        EOF

        # Make the script executable
        chmod +x "$SCRIPT_NAME"

        # Display the contents of the script for verification
        echo "Created launcher script '$SCRIPT_NAME' with the following contents:"
        cat "$SCRIPT_NAME"

        # Update subsequent steps to use the correct script name
        echo "LAUNCHER_SCRIPT_NAME=$SCRIPT_NAME" >> $GITHUB_ENV

    - name: Add launcher script to app bundle
      run: |
        mkdir -p "dist/nexa.app/Contents/Resources"
        cp "${{ env.LAUNCHER_SCRIPT_NAME }}" "dist/nexa.app/Contents/Resources/nexa"

    - name: Modify Info.plist
      run: |
        /usr/libexec/PlistBuddy -c "Set CFBundleExecutable nexa" "dist/nexa.app/Contents/Info.plist"
        /usr/libexec/PlistBuddy -c "Add LSUIElement string 1" "dist/nexa.app/Contents/Info.plist"

    - name: Set app icon
      run: |
        # Ensure the icon is in the correct location
        cp nexa-icon.icns dist/nexa.app/Contents/Resources/

        # Update Info.plist to use the icon
        /usr/libexec/PlistBuddy -c "Set :CFBundleIconFile nexa-icon" dist/nexa.app/Contents/Info.plist

    - name: Create keychain and import certificate
      env:
        CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
        CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
      run: |
        echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import certificate.p12 -k build.keychain -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign
        security find-identity -v -p codesigning build.keychain
        security find-certificate -a -c "Developer ID Application" build.keychain

    - name: Verify certificate import
      run: |
        security find-identity -v -p codesigning
        security find-certificate -a -c "Developer ID Application"

    - name: Unlock keychain
      run: |
        security unlock-keychain -p "" build.keychain
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

    - name: Sign the app
      env:
        APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
      run: |
        # Sign Python binaries
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa.app/Contents/Resources/Python"
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa.app/Contents/Resources/Python.framework/Python"
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa.app/Contents/Frameworks/Python"
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa.app/Contents/Frameworks/Python.framework/Python"

        # Sign all other components
        find "dist/nexa.app/Contents" -type f \( -name "*.so" -o -name "*.dylib" \) -exec codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" {} \;
        
        # Sign the main executable
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa.app/Contents/MacOS/nexa"
        
        # Sign the entire app bundle
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa.app"
        
        # Verify the signature
        codesign -vvv --deep --strict "dist/nexa.app"

        # List all signed components for verification
        codesign -dvv "dist/nexa.app"

    - name: Create DMG with Postinstall Script
      run: |
        # Create a temporary directory for DMG contents
        mkdir dmg_contents
        cp -r dist/nexa.app dmg_contents/
        cp nexa-icon.icns dmg_contents/.VolumeIcon.icns

        # Create postinstall script
        cat << EOF > dmg_contents/postinstall
        #!/bin/bash
        ln -sf "/Applications/Nexa.app/Contents/Resources/nexa" "/usr/local/bin/nexa"
        LAUNCHER="/Applications/Nexa.app/Contents/MacOS/nexa"
        mv "\$LAUNCHER" "\$LAUNCHER.real"
        cat << EOL > "\$LAUNCHER"
        #!/bin/bash
        "\$LAUNCHER.real" --gui
        EOL
        chmod +x "\$LAUNCHER"
        EOF
        chmod +x dmg_contents/postinstall

        # Create the DMG
        hdiutil create -volname "Nexa Installer" -srcfolder dmg_contents -ov -format UDRW "Nexa-${{ env.VERSION }}.dmg"

        # Mount the DMG
        hdiutil attach "Nexa-${{ env.VERSION }}.dmg"

        # Set the custom icon for the DMG
        SetFile -a C "/Volumes/Nexa Installer"

        # Create .DS_Store with custom layout
        echo '
        tell application "Finder"
          tell disk "Nexa Installer"
            open
            set current view of container window to icon view
            set toolbar visible of container window to false
            set statusbar visible of container window to false
            set the bounds of container window to {400, 100, 885, 430}
            set theViewOptions to the icon view options of container window
            set arrangement of theViewOptions to not arranged
            set icon size of theViewOptions to 72
            make new alias file at container window to POSIX file "/Applications" with properties {name:"Applications"}
            set position of item "nexa.app" of container window to {100, 180}
            set position of item "Applications" of container window to {375, 180}
            set position of item "postinstall" of container window to {237, 180}
            update without registering applications
            delay 5
            close
          end tell
        end tell
        ' | osascript

        # Detach the DMG
        hdiutil detach "/Volumes/Nexa Installer"

        # Convert the DMG to read-only
        hdiutil convert "Nexa-${{ env.VERSION }}.dmg" -format UDZO -o "Nexa-${{ env.VERSION }}-final.dmg"
        mv "Nexa-${{ env.VERSION }}-final.dmg" "Nexa-${{ env.VERSION }}.dmg"

        # Clean up
        rm -rf dmg_contents

    - name: Sign the DMG
      env:
        APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
      run: |
        # Sign the DMG
        codesign --force --sign "$APPLE_DEVELOPER_ID" --options runtime "Nexa-${{ env.VERSION }}.dmg"

        # Verify the DMG signature
        codesign -vvv --deep --strict "Nexa-${{ env.VERSION }}.dmg"

    - name: Upload artifact (pre-notarization)
      uses: actions/upload-artifact@v4
      with:
        name: nexa-${{ env.VERSION }}-cpu-macos-amd64-pre-notarization
        path: Nexa-${{ env.VERSION }}.dmg

    - name: Submit for notarization
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        NOTARIZATION_OUTPUT=$(xcrun notarytool submit Nexa-${{ env.VERSION }}.dmg --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID")
        echo "$NOTARIZATION_OUTPUT"
        
        # Extracting SUBMISSION_ID and ensuring it's on a single line
        SUBMISSION_ID=$(echo "$NOTARIZATION_OUTPUT" | grep 'id:' | head -n 1 | awk '{print $2}' | tr -d '\n')
        echo "SUBMISSION_ID=$SUBMISSION_ID" >> $GITHUB_ENV

    - name: Wait for notarization and check result
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        while true; do
          NOTARIZATION_INFO=$(xcrun notarytool info ${{ env.SUBMISSION_ID }} --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID")
          STATUS=$(echo "$NOTARIZATION_INFO" | grep "status" | cut -d: -f2 | xargs)
          echo "Notarization status: $STATUS"
          if [ "$STATUS" = "Accepted" ]; then
            echo "Notarization successful"
            break
          elif [ "$STATUS" = "Invalid" ] || [ "$STATUS" = "Rejected" ]; then
            echo "Notarization failed. Fetching detailed log..."
            xcrun notarytool log ${{ env.SUBMISSION_ID }} --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID"
            exit 1
          fi
          echo "Waiting for 60 seconds before checking again..."
          sleep 60
        done

    - name: Staple the notarization ticket
      if: success()
      run: |
        xcrun stapler staple Nexa-${{ env.VERSION }}.dmg

    - name: Upload artifact (post-notarization)
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: nexa-${{ env.VERSION }}-cpu-macos-amd64-notarized
        path: Nexa-${{ env.VERSION }}.dmg