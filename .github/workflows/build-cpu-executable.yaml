name: Build Nexa Executables

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install .
    
    - name: Extract version
      run: |
        VERSION=$(python -c "import re; print(re.search(r'__version__\s*=\s*[\'\"](.*?)[\'\"]', open('nexa/__init__.py').read()).group(1))")
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Build with PyInstaller
      run: pyinstaller nexa.spec
    
    - name: Package (Linux)
      if: runner.os == 'Linux'
      run: |
        cd dist
        tar -czvf nexa-${{ env.VERSION }}-cpu-linux-amd64.tar.gz nexa
        cd ..
    
    - name: Package (macOS)
      if: runner.os == 'macOS'
      run: |
        cd dist
        tar -czvf nexa-${{ env.VERSION }}-cpu-macos-amd64.tar.gz nexa
        cd ..
    
    - name: Package (Windows)
      if: runner.os == 'Windows'
      run: |
        cd dist
        7z a -tzip nexa-${{ env.VERSION }}-cpu-windows-amd64.zip nexa
        cd ..
    
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: nexa-${{ env.VERSION }}-cpu-${{ runner.os }}-amd64
        path: dist/nexa-${{ env.VERSION }}-cpu-*-amd64.*