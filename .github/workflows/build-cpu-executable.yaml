name: Build Nexa Executables

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller wheel setuptools scikit-build-core

    - name: Install nexaai
      run: pip install -e . --verbose --prefer-binary --index-url https://nexaai.github.io/nexa-sdk/whl/cpu --extra-index-url https://pypi.org/simple --no-cache-dir

    - name: Create version extraction script
      run: |
        echo "import re" > extract_version.py
        echo "import sys" >> extract_version.py
        echo "with open('nexa/__init__.py', 'r') as f:" >> extract_version.py
        echo "    content = f.read()" >> extract_version.py
        echo "match = re.search(r'^__version__\\s*=\\s*[\'\"']([^\'\"']*)[\'\"']', content, re.MULTILINE)" >> extract_version.py
        echo "if match:" >> extract_version.py
        echo "    print(match.group(1))" >> extract_version.py
        echo "else:" >> extract_version.py
        echo "    print('Version not found', file=sys.stderr)" >> extract_version.py
        echo "    sys.exit(1)" >> extract_version.py

    - name: Extract version (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $VERSION = python extract_version.py
        echo "VERSION=$VERSION" >> $env:GITHUB_ENV

    - name: Extract version (Unix)
      if: runner.os != 'Windows'
      run: |
        VERSION=$(python extract_version.py)
        echo "VERSION=$VERSION" >> $GITHUB_ENV


    - name: Build with PyInstaller
      run: pyinstaller entry.spec

    - name: Package (Linux)
      if: runner.os == 'Linux'
      run: |
        cd dist
        tar -czvf nexa-${{ env.VERSION }}-cpu-linux-amd64.tar.gz nexa
        cd ..

    - name: Package (macOS)
      if: runner.os == 'macOS'
      run: |
        cd dist
        tar -czvf nexa-${{ env.VERSION }}-cpu-macos-amd64.tar.gz nexa
        cd ..

    - name: Package (Windows)
      if: runner.os == 'Windows'
      run: |
        cd dist
        7z a -tzip nexa-${{ env.VERSION }}-cpu-windows-amd64.zip nexa
        cd ..

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: nexa-${{ env.VERSION }}-cpu-${{ runner.os }}-amd64
        path: dist/nexa-${{ env.VERSION }}-cpu-*-amd64.*